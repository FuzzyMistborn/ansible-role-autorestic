---
- name: get status of autorestic_install_path
  stat:
    path: "{{ autorestic_install_path }}"
  register: is_installed

- name: set autorestic installed
  set_fact:
    autorestic_is_installed: "{{ is_installed.stat.exists }}"

- name: get installed autorestic version
  shell: "set -o pipefail && {{ is_installed.stat.path }} --version | grep -oP 'autorestic\\ version\ \\K[0-9]*\\.[0-9]*\\.[0-9]*'"
  register: installed_version_registered
  changed_when: false
  when: autorestic_is_installed == True

- name: get latest GH autorestic version
  uri:
    url: https://api.github.com/repos/cupcakearmy/autorestic/releases/latest
    return_content: true
  register: release_version_registered
  when: autorestic_download_latest_ver == True

- name: set autorestic version (latest)
  set_fact:
    autorestic_ver: "{{ release_version_registered.json.tag_name|regex_replace('v') }}"
  when: autorestic_download_latest_ver == True

- name: set autorestic version (pinned)
  set_fact:
    autorestic_ver: "{{ autorestic_pinned_ver }}"
  when: autorestic_download_latest_ver == False

- name: update autorestic binary
  command: "{{ is_installed.stat.path }} upgrade"
  when: autorestic_is_installed == True and autorestic_download_latest_ver == True
  register: update
  changed_when: "'Already up to date' not in update.stdout_lines"

- block:
    - name: ensure autorestic_download_directory does not exist
      file:
        path: "{{ autorestic_download_directory }}"
        state: absent

    - name: create autorestic_download_directory
      file:
        path: "{{ autorestic_download_directory }}"
        state: directory
        mode: 0755

    - name: download autorestic
      get_url:
        url: "{{ autorestic_gh_url }}/v{{ autorestic_ver }}/autorestic_{{ autorestic_ver }}_{{ autorestic_distro }}.bz2"
        dest: "{{ autorestic_download_directory }}"
        force: yes
        owner: root
        group: root
        mode: +x

    - name: set autorestic filename
      set_fact: file_name="autorestic_{{ autorestic_ver }}_{{ autorestic_distro }}.bz2"

    - name: Unzip autorestic release
      shell: "cd {{ autorestic_download_directory }} && bzip2 -d {{ file_name }} && mv {{ file_name | regex_replace('.bz2') }} {{ autorestic_install_path }}"

  when: autorestic_is_installed == False or ( autorestic_is_installed == True and autorestic_download_latest_ver == False and installed_version_registered.stdout != autorestic_pinned_ver )
